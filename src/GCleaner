#!/usr/bin/python3
"""
Copyright 2019 Juan Pablo Lozano

This file is part of GCleaner.

GCleaner is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

GCleaner is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along
with GCleaner. If not, see http://www.gnu.org/licenses/.
"""
import sys
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gio, Gdk
from constants import Constants
from gcleaner_window import GCleaner


class Application(Gtk.Application):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, application_id="org.gcleaner",
                         flags=Gio.ApplicationFlags.FLAGS_NONE,
                         **kwargs)
        self.window = None

    def do_startup(self):
        Gtk.Application.do_startup(self)

        # Here we define the Actions
        self.about_action = Gio.SimpleAction.new("about", None)
        self.about_action.connect("activate", self.about_callback)
        self.add_action(self.about_action)

        action = Gio.SimpleAction.new("quit", None)
        action.connect("activate", self.on_quit)
        self.add_action(action)

        builder = Gtk.Builder.new_from_file("/usr/share/gcleaner/app-menu.xml")
        self.set_app_menu(builder.get_object("app-menu"))

    def do_activate(self):
        # We only allow a single window and raise any existing ones
        if not self.window:
            # Windows are associated with the application
            # when the last one is closed the application shuts down
            self.window = GCleaner(app=self, application=self, title=Constants.PROGRAM_NAME)

        self.window.present()

    # ACTIONS CALLBACKS HERE
    def about_callback(self, action, param):
        #self.__about = new GCleaner.Widgets.About()
        #self.__about.run()
        about_dialog = Gtk.AboutDialog(transient_for=self.window, modal=True)
        about_dialog.present()

    def on_quit(self, action, param):
        self.quit()



css_file = "/usr/share/gcleaner/gtk-widgets-gcleaner.css"
css_provider = Gtk.CssProvider()

try:
    css_provider.load_from_path(css_file)
    Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), css_provider, Gtk.STYLE_PROVIDER_PRIORITY_USER);
except Exception as err:
    print("ORG.GCLEANER.APP: [ERROR CARGANDO ESTILOS CSS [" + str(err) + "]");
    print(">>> Check path: /usr/share/gcleaner/gtk-widgets-gcleaner.css");

if len(sys.argv) > 1:
    if sys.argv[1] == "--version" or sys.argv[1] == "-version":
        about = GCleanerAbout()
        about.run()
        about.connect("destroy", Gtk.main_quit)

if __name__ == "__main__":
    app = Application()
    app.run(sys.argv)
